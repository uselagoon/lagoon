#!/bin/bash

##############################################
### Function to generate the url used by autogenerated ingress objects
### Given a router pattern, it will create the required domains
##############################################
function routerPattern2DomainGenerator {
    DOMAIN_PARTS=${1}
    SERVICE=${2}
    PROJECT=${3}
    ENVIRONMENT=${4}

    HAS_SERVICE_PATTERN=false

    re='(.*)\$\{service\}(.*)'
    if [[ $DOMAIN_PARTS =~ $re ]]; then
        HAS_SERVICE_PATTERN=true
        DOMAIN_PARTS2=${BASH_REMATCH[1]}${SERVICE}
        DOMAIN_PARTS=${DOMAIN_PARTS2}${BASH_REMATCH[2]}
    fi

    re='(.*)\$\{project\}(.*)'
    if [[ $DOMAIN_PARTS =~ $re ]]; then
        DOMAIN_PARTS2=${BASH_REMATCH[1]}${PROJECT}
        DOMAIN_PARTS=${DOMAIN_PARTS2}${BASH_REMATCH[2]}
    fi

    re='(.*)\$\{environment\}(.*)'
    if [[ $DOMAIN_PARTS =~ $re ]]; then
        DOMAIN_PARTS2=${BASH_REMATCH[1]}${ENVIRONMENT}
        DOMAIN_PARTS=${DOMAIN_PARTS2}${BASH_REMATCH[2]}
    fi

    # fallback to the default behaviour which adds the service with a dot
    # if the pattern doesn't have a service pattern defined in it
    if [ $HAS_SERVICE_PATTERN == "false" ]; then
        DOMAIN_PARTS=${SERVICE}.${DOMAIN_PARTS}
    fi


    # once all the parts of the router pattern have been
    DOMAIN_HASH=$(echo $DOMAIN_PARTS | sha256sum | awk '{print $1}' | cut -c -8)
    FINAL_DOMAIN=""
    # split the domain up by the dot and iterate over each part to check its length
    IFS='.' read -ra DOMAIN_PARTS_SPLIT <<< "$DOMAIN_PARTS"
    for DOMAIN_PART in ${DOMAIN_PARTS_SPLIT[@]}
    do
        if [ ${#DOMAIN_PART} -gt 63 ]; then
            # if the part of the domain is greater than 63, then keep 54 characters and add the domain hash (8) and a dash (1)
            # to the remaining domain part (54+1+8=63)
            DOMAIN_PART=$(echo ${DOMAIN_PART} | cut -c -54 | sed -e 's/-$//')-${DOMAIN_HASH}
        fi
        # combine the parts
        FINAL_DOMAIN=${FINAL_DOMAIN}${DOMAIN_PART}.
    done
    # strip the trailing dot from the domain
    echo "$(echo ${FINAL_DOMAIN} | rev | cut -c 2- | rev)"
}

##############################################
### Function to generate the short url used by some ingress objects
### Performs the same function that the build-deploy controller currently does
##############################################
function generateShortUrl {
    DOMAIN_PARTS=${1}
    SERVICE=${2}
    PROJECT=${3}
    ENVIRONMENT=${4}

    HAS_SERVICE_PATTERN=false

    re='(.*)\$\{service\}(.*)'
    if [[ $DOMAIN_PARTS =~ $re ]]; then
        HAS_SERVICE_PATTERN=true
        DOMAIN_PARTS2=${BASH_REMATCH[1]}${SERVICE}
        DOMAIN_PARTS=${DOMAIN_PARTS2}${BASH_REMATCH[2]}
    fi

    re='(.*)\$\{project\}(.*)'
    if [[ $DOMAIN_PARTS =~ $re ]]; then
        SHA256_B32_PROJECT=$(echo -e "import sys\nimport base64\nimport hashlib\nprint(base64.b32encode(bytearray(hashlib.sha256(sys.argv[1].encode()).digest())).decode('utf-8'))" | python3 -  "${PROJECT}" | tr '[:upper:]' '[:lower:]' | cut -c -8)
        DOMAIN_PARTS2=${BASH_REMATCH[1]}${SHA256_B32_PROJECT}
        DOMAIN_PARTS=${DOMAIN_PARTS2}${BASH_REMATCH[2]}
    fi

    re='(.*)\$\{environment\}(.*)'
    if [[ $DOMAIN_PARTS =~ $re ]]; then
        SHA256_B32_ENVIRONMENT=$(echo -e "import sys\nimport base64\nimport hashlib\nprint(base64.b32encode(bytearray(hashlib.sha256(sys.argv[1].encode()).digest())).decode('utf-8'))" | python3 -  "${ENVIRONMENT}" | tr '[:upper:]' '[:lower:]' | cut -c -8)
        DOMAIN_PARTS2=${BASH_REMATCH[1]}${SHA256_B32_ENVIRONMENT}
        DOMAIN_PARTS=${DOMAIN_PARTS2}${BASH_REMATCH[2]}
    fi

    # fallback to the default behaviour which adds the service with a dot
    # if the pattern doesn't have a service pattern defined in it
    if [ $HAS_SERVICE_PATTERN == "false" ]; then
        DOMAIN_PARTS=${SERVICE}.${DOMAIN_PARTS}
    fi
    echo $DOMAIN_PARTS
}