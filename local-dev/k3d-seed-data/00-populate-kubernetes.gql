mutation PopulateApi {

  #### Populate API with lagoon-remote Kubernetes
  CiLocalKubernetes: addKubernetes(
    input: {
      id: 2001
      name: "ci-local-control-k8s"
      consoleUrl: "${CONSOLE_URL}"
      routerPattern: "${ROUTER_PATTERN}.sslip.io"
      sshHost: "${SSH_PORTAL_HOST}"
      sshPort: "${SSH_PORTAL_PORT}"
      token: "${TOKEN}"
    }
  ) {
    id
  }

  ## Create some general users with specific role against lagoon-demo for permissions validations in local testing easily
  UserExampleGuest: addUser(
    input: {
      email: "guest@example.com"
      comment: "guest user"
    }
  ) {
    id
  }

  UserExampleReporter: addUser(
    input: {
      email: "reporter@example.com"
      comment: "reporter user"
    }
  ) {
    id
  }

  UserExampleDeveloper: addUser(
    input: {
      email: "developer@example.com"
      comment: "developer user"
    }
  ) {
    id
  }

  UserExampleMaintainer: addUser(
    input: {
      email: "maintainer@example.com"
      comment: "maintainer user"
    }
  ) {
    id
  }

  UserExampleOwner: addUser(
    input: {
      email: "owner@example.com"
      comment: "owner user"
    }
  ) {
    id
  }

  UserExamplePlatformOwner: addUser(
    input: {
      email: "platformowner@example.com"
      comment: "platform owner user"
    }
  ) {
    id
  }

  UserExamplePlatformViewer: addUser(
    input: {
      email: "platformviewer@example.com"
      comment: "platform viewer user"
    }
  ) {
    id
  }

  UserExamplePlatformOrgOwner: addUser(
    input: {
      email: "platformorgowner@example.com"
      comment: "platform organization owner user"
    }
  ) {
    id
  }

  ## Assign platform owner role
  UserExamplePlatformOwnerRole: addPlatformRoleToUser(
    user:{
      email:"platformowner@example.com"
    }
    role: OWNER
  ){
    email
    platformRoles
  }

  ## Assign platform viewer role
  UserExamplePlatformViewerRole: addPlatformRoleToUser(
    user:{
      email:"platformviewer@example.com"
    }
    role: VIEWER
  ){
    email
    platformRoles
  }

  ## Assign platform organization owner role
  UserExamplePlatformOrgOwnerRole: addPlatformRoleToUser(
    user:{
      email:"platformorgowner@example.com"
    }
    role: ORGANIZATION_OWNER
  ){
    email
    platformRoles
  }

  LagoonDemoGroup: addGroup(
    input: {
      name: "lagoon-demo-group"
    }
  ) {
    id
  }

  UserExampleGuestGroup: addUserToGroup(
    input: {
      user: {
        email:"guest@example.com"
      }
      group: {
        name: "lagoon-demo-group"
      }
      role: GUEST
    }
  ) {
    name
  }

  UserExampleReporterGroup: addUserToGroup(
    input: {
      user: {
        email:"reporter@example.com"
      }
      group: {
        name: "lagoon-demo-group"
      }
      role: REPORTER
    }
  ) {
    name
  }

  UserExampleDeveloperGroup: addUserToGroup(
    input: {
      user: {
        email:"developer@example.com"
      }
      group: {
        name: "lagoon-demo-group"
      }
      role: DEVELOPER
    }
  ) {
    name
  }

  UserExampleMaintainerGroup: addUserToGroup(
    input: {
      user: {
        email:"maintainer@example.com"
      }
      group: {
        name: "lagoon-demo-group"
      }
      role: MAINTAINER
    }
  ) {
    name
  }

  UserExampleOwnerGroup: addUserToGroup(
    input: {
      user: {
        email:"owner@example.com"
      }
      group: {
        name: "lagoon-demo-group"
      }
      role: OWNER
    }
  ) {
    name
  }

  # Organizations
  UIOrganization1: addOrganization(input: {
    id: 1
    name: "lagoon-demo-organization"
    friendlyName: "Lagoon Demo Organization"
    description: "An organization for testing"
    quotaProject: 5
    quotaEnvironment: 4
    quotaGroup: 10
    quotaNotification: 10
  }) {
    id
    name
    quotaProject
    quotaEnvironment
    quotaGroup
    quotaNotification
  }

  UIOrganizationUser: addUser(
    input: {
      email: "orguser@example.com"
      comment: "test user that will be in a group in an organization"
    }
  ) {
    id
  }
  UIOrganizationViewer: addUser(
    input: {
      email: "orgviewer@example.com"
      comment: "user that will be an organization viewer"
    }
  ) {
    id
  }
  UIOrganizationAdmin: addUser(
    input: {
      email: "orgadmin@example.com"
      comment: "user that will be an organization admin"
    }
  ) {
    id
  }
  UIOrganizationOwner: addUser(
    input: {
      email: "orgowner@example.com"
      comment: "user that will be an organization owner"
    }
  ) {
    id
  }

  UIOrganizationGroup: addGroupToOrganization(
    input: {
      name: "lagoon-demo-organization-group"
      organization: 1}
  ) {
    id
  }

  UIOrganizationUserToGroup: addUserToGroup(
    input: {
      user: {
        email:"orguser@example.com"
      }
      group: {
        name: "lagoon-demo-organization-group"
      }
      role: MAINTAINER
    }
  ) {
    name
  }

  UIOrganizationUserInviteToGroup: addUserToGroup(
    input: {
      user: {
        email:"invite@example.com"
      }
      group: {
        name: "lagoon-demo-organization-group"
      }
      role: GUEST
      inviteUser: true
    }
  ) {
    name
  }

  UIOrganizationAddViewer: addAdminToOrganization(input: {user: {email: "orgviewer@example.com"}, organization: {id: 1}, role: VIEWER}) {
    id
  }

  UIOrganizationAddAdmin: addAdminToOrganization(input: {user: {email: "orgadmin@example.com"}, organization: {id: 1}, role: ADMIN}) {
    id
  }

  UIOrganizationAddOwner: addAdminToOrganization(input: {user: {email: "orgowner@example.com"}, organization: {id: 1}, role: OWNER}) {
    id
  }

  UIOrganizationNotificationSlack: addNotificationSlack(input: {organization: 1, name: "slack-test", channel: "lobby", webhook: "http://slack.example.com/hooks/abcdefg"}) {
    id
  }

  UIOrganizationNotificationRocketChat: addNotificationRocketChat(input: {organization: 1, name: "rocketchat-test", channel: "lobby", webhook: "http://rocketchat.example.com/hooks/abcdefg"}) {
    id
  }

  UIOrganizationNotificationEmail: addNotificationEmail(input: {organization: 1, name: "email-test", emailAddress: "fake@example.com"}) {
    id
  }

  UIOrganizationNotificationWebhook: addNotificationWebhook(input: {organization: 1, name: "webhook-test", webhook: "http://webhook.example.com"}) {
    id
  }

  UIOrganizationNotificationTeams: addNotificationMicrosoftTeams(input: {organization: 1, name: "teams-test", webhook: "http://teams.example.com/hooks/sdgsgsgs"}) {
    id
  }

  AddUIKubernetesToOrganization: addDeployTargetToOrganization(input:{
      deployTarget: 2001
      organization: 1
    }) {
      id
    }

  UIProject2: addProject(
    input: {
      id: 180
      organization: 1
      name: "lagoon-demo-org"
      availability: HIGH
      openshift: 2001
      gitUrl: "https://github.com/lagoon-examples/drupal10-base"
      productionEnvironment: "main"
      problemsUi: 1
      factsUi: 1
    }
  ) {
    id
  }

  # Add mailhub service
  UIProject2Envvar: addOrUpdateEnvVariableByName(
    input: {
      project: "lagoon-demo-org"
      scope: RUNTIME
      name: "SSMTP_MAILHUB"
      value: "mxout.lagoon.svc:25"
    }
  ) {
    id
  }

  UIOrganizationProjectGroup: addGroupsToProject(
    input: {
      project: {
        name: "lagoon-demo-org"
      }
      groups: [
        {
          name: "lagoon-demo-organization-group"
        }
      ]
    }
  ) {
    id
  }

  UIOrganizationProjectEnvironment1: addOrUpdateEnvironment(
    input: {
      id: 30
      name: "main"
      project: 180
      deployType: BRANCH
      deployBaseRef: "main"
      environmentType: PRODUCTION
      openshiftProjectName: "lagoon-demo-org-main"
    }
  ) {
    id
  }

  UIOrganizationProjectEnvironment1Update: updateEnvironment(
    input: {
      id: 30
      patch: {
        route: "https://lagoondemoorg.example.org"
        routes: "https://lagoondemoorg.example.org,https://nginx.main.lagoon-demo-org.ui-kubernetes.lagoon.sh"
      }
    }
  ) {
    id
  }
  UIOrganizationProjectEnvironment2: addOrUpdateEnvironment(
    input: {
      id: 31
      name: "staging"
      project: 180
      deployType: BRANCH
      deployBaseRef: "staging"
      environmentType: DEVELOPMENT
      openshiftProjectName: "lagoon-demo-org-staging"
    }
  ) {
    id
  }
  UIOrganizationProjectEnvironment3: addOrUpdateEnvironment(
    input: {
      id: 32
      name: "development"
      project: 180
      deployType: BRANCH
      deployBaseRef: "development"
      environmentType: DEVELOPMENT
      openshiftProjectName: "lagoon-demo-org-development"
    }
  ) {
    id
  }
  UIOrganizationProjectEnvironment4: addOrUpdateEnvironment(
    input: {
      id: 33
      name: "pr-15"
      project: 180
      deployType: PULLREQUEST
      deployBaseRef: "target"
      deployHeadRef: "source"
      deployTitle: "pr-15"
      environmentType: DEVELOPMENT
      openshiftProjectName: "lagoon-demo-org-pr-15"
    }
  ) {
    id
  }



  UICustomer1: addGroup(
    input: { name: "lagoon-group" }
  ) {
    id
  }

  UIProject1: addProject(
    input: {
      id: 18
      name: "lagoon-demo"
      availability: HIGH
      openshift: 2001
      gitUrl: "https://github.com/lagoon-examples/drupal10-base"
      productionEnvironment: "main"
      problemsUi: 1
      factsUi: 1
    }
  ) {
    id
  }

  LagoonDemoToGroup: addGroupsToProject(
    input: {
      project: {
        name: "lagoon-demo"
      }
      groups: [
        {
          name: "lagoon-demo-group"
        }
      ]
    }
  ) {
    id
  }

  # Add mailhub service
  UIProject1Envvar: addOrUpdateEnvVariableByName(
    input: {
      project: "lagoon-demo"
      scope: RUNTIME
      name: "SSMTP_MAILHUB"
      value: "mxout.lagoon.svc:25"
    }
  ) {
    id
  }

  UIProject1Group5: addGroupsToProject(
    input: {
      project: {
        name: "lagoon-demo"
      }
      groups: [
        {
          name: "lagoon-group"
        }
      ]
    }
  ) {
    id
  }

  UIProject1Environment1: addOrUpdateEnvironment(
    input: {
      id: 3
      name: "main"
      project: 18
      deployType: BRANCH
      deployBaseRef: "main"
      environmentType: PRODUCTION
      openshiftProjectName: "lagoon-demo-main"
    }
  ) {
    id
  }

  UIProject1Environment1Update: updateEnvironment(
    input: {
      id: 3
      patch: {
        route: "https://lagoondemo.example.org"
        routes: "https://lagoondemo.example.org,https://nginx.main.lagoon-demo.ui-kubernetes.lagoon.sh"
      }
    }
  ) {
    id
  }

  UIProject1Environment1Backup1: addBackup(
    input: {
      environment: 3
      source: "mariadb"
      backupId: "e2e1d31b4a7dfc1687f469b6673f6bf2c0aabee0cc6b3f1bdbde710a9bc6280d"
      created: "2023-10-14 00:33:16"
    }
  ) {
    id
  }

  UIProject1Environment1Backup1Restore: addRestore(
    input: {
      backupId: "e2e1d31b4a7dfc1687f469b6673f6bf2c0aabee0cc6b3f1bdbde710a9bc6280d"
      execute: false
    }
  ) {
    id
  }

  UIProject1Environment1Backup2: addBackup(
    input: {
      environment: 3
      source: "files"
      backupId: "e2e1d31b4a7dfc1687f469b6673f6bf2c0aabee0cc6b3f1bdbde710a9bc6280f"
      created: "2023-10-14 00:33:16"
    }
  ) {
    id
  }

  UIProject1Environment1Backup2Restore: addRestore(
    input: {
      backupId: "e2e1d31b4a7dfc1687f469b6673f6bf2c0aabee0cc6b3f1bdbde710a9bc6280f"
      status: SUCCESSFUL
      restoreLocation: "http://172.17.0.1:9000/restores/lagoon-demo-main.tar.gz"
      execute: false
    }
  ) {
    id
  }

  UIProject1Environment1Backup3: addBackup(
    input: {
      environment: 3
      source: "mariadb"
      backupId: "e260f07c374e4a3319c5d46e688dab6f1eb23c3e61c166a37609d55762d2ee0b"
      created: "2023-10-13 00:33:16"
    }
  ) {
    id
  }

  UIProject1Environment1Backup3Restore: addRestore(
    input: {
      backupId: "e260f07c374e4a3319c5d46e688dab6f1eb23c3e61c166a37609d55762d2ee0b"
      status: FAILED
      execute: false
    }
  ) {
    id
  }

  UIProject1Environment1Backup4: addBackup(
    input: {
      environment: 3
      source: "files"
      backupId: "bf072a09e17726da54adc79936ec8745521993599d41211dfc9466dfd5bc32a5"
      created: "2023-10-13 00:33:16"
    }
  ) {
    id
  }

  UIProject1Environment1addDeployment1: addDeployment(
    input: {
      name: "lagoon-build-123abc"
      status: COMPLETE
      remoteId: "86358316-a755-11ed-8206-032901f4c7e3"
      environment: 3
      created: "2023-10-07 23:02:41"
      started: "2023-10-07 23:03:41"
      completed: "2023-10-07 23:20:41"
    }
  ) {
    id
  }
  UIProject1Environment1addDeployment2: addDeployment(
    input: {
      name: "lagoon-build-def456"
      remoteId: "85e36e3c-a755-11ed-abf6-df28d8a74109"
      status: FAILED
      environment: 3
      created: "2023-10-07 23:02:41"
      started: "2023-10-07 23:03:41"
      completed: "2023-10-07 23:20:41"
    }
  ) {
    id
  }
  UIProject1Environment1addDeployment3: addDeployment(
    input: {
      name: "lagoon-build-7g8h9i"
      remoteId: "84e1dc8a-a755-11ed-a37d-770f36aa3d4e"
      status: RUNNING
      environment: 3
      created: "2023-10-07 23:02:41"
      started: "2023-10-07 23:03:41"
    }
  ) {
    id
  }

  UIProject1Environment1addTask1: addTask(
    input: {
      name: "Developer task"
      id: 123
      remoteId: "5b21aff1-689c-41b7-80d7-6de9f5bff1f3"
      status: FAILED
      environment: 3
      service: "cli"
      command: "site-status"
      created: "2023-10-07 23:00:00"
      started: "2023-10-07 23:00:10"
      completed: "2023-10-07 23:00:20"
      execute: false
    }
  ) {
    id
  }

  UIProject1Environment1addTask2: addTask(
    input: {
      name: "Maintainer task"
      id: 124
      remoteId: "50573da4-f0dd-477a-9261-c4785ac2adff"
      status: COMPLETE
      environment: 3
      service: "cli"
      command: "site-status"
      created: "2023-10-07 23:01:00"
      started: "2023-10-07 23:01:10"
      completed: "2023-10-07 23:01:30"
      execute: false
    }
  ) {
    id
  }

  UIProject1Environment1addTask3: addTask(
    input: {
      name: "Maintainer task"
      id: 125
      remoteId: "e3869563-126d-4922-b6c4-36289a374edb"
      status: PENDING
      environment: 3
      service: "cli"
      command: "site-status"
      created: "2023-10-07 23:02:00"
      started: "2023-10-07 23:02:10"
      execute: false
    }
  ) {
    id
  }

  UIProjectAdvancedTask1: addAdvancedTaskDefinition(
    input:{
      name: "Admin only task"
      description: "A task that only admins can see and run (logs also only visible to admin)"
      type: COMMAND
      service: "cli"
      command: "site-status"
      permission: MAINTAINER
      project: 18
      adminOnlyView: true
      deployTokenInjection: true
      projectKeyInjection: true
    }
  ){
    ... on AdvancedTaskDefinitionCommand {
      id
      name
      description
      service
      command
    }
  }

  UIProjectAdvancedTask2: addAdvancedTaskDefinition(
    input:{
      name: "Maintainer task"
      description: "A task that only maintainers can run"
      type: COMMAND
      service: "cli"
      command: "site-status"
      permission: MAINTAINER
      project: 18
    }
  ){
    ... on AdvancedTaskDefinitionCommand {
      id
      name
      description
      service
      command
    }
  }

  UIProjectAdvancedTask3: addAdvancedTaskDefinition(
    input:{
      name: "Developer task"
      description: "A task that developers can run"
      type: COMMAND
      service: "cli"
      command: "site-status"
      permission: DEVELOPER
      project: 18
    }
  ){
    ... on AdvancedTaskDefinitionCommand {
      id
      name
      description
      service
      command
    }
  }

  UIProjectInvokeAdvancedTask1: invokeRegisteredTask(
    advancedTaskDefinition: 1
    environment: 3
  ) {
    id
  }

  UIProjectUpdateAdvancedTask1: updateTask(
    input:{
      id: 126
      patch: {
        remoteId: "0ba18cc1-03e7-4dd6-b6e9-95c1ff54103a"
      }
    }
  ) {
    id
  }

  UIProject1Environment1addServices1:   addOrUpdateEnvironmentService(
    input: {
      environment: 3
      name: "cli"
      type: "cli-persistent"
      containers: [{name: "cli"}]
    }
  ){
    id
    name
    type
  }
  UIProject1Environment1addServices2:   addOrUpdateEnvironmentService(
    input: {
      environment: 3
      name: "nginx"
      type: "nginx-php-persistent"
      containers: [{name: "nginx"},{name:"php"}]
    }
  ){
    id
    name
    type
  }
  UIProject1Environment1addServices3:   addOrUpdateEnvironmentService(
    input: {
      environment: 3
      name: "mariadb"
      type: "mariadb-single"
      containers: [{name: "mariadb"}]
    }
  ){
    id
    name
    type
  }

  UIProject1Environment1addStorage1: addOrUpdateStorageOnEnvironment(input:{
    environment: 3
    persistentStorageClaim: "nginx"
    kibUsed: 200000
  }) {
    id
    kibUsed
  }

  UIProject1Environment1addStorage2: addOrUpdateStorageOnEnvironment(input:{
    environment: 3
    persistentStorageClaim: "mariadb"
    kibUsed: 200000
  }) {
    id
    kibUsed
  }

  UIProject1Environment1addFacts: addFacts(
    input: {
      facts: [
          {
            name: "lagoon-category"
            value: "saas"
            environment: 3
            source: ""
            description: "Category of the site"
            category: "Lagoon"
            keyFact: true
          },
          {
            name: "drupal-core"
            value: "9.0.1"
            environment: 3
            source: "drush-pml"
            description: "Drupal CMS version found on environment"
            category: "Framework"
            keyFact: true
          },
          {
            name: "php-version"
            value: "8.0.3"
            environment: 3
            source: "php-version"
            description: "PHP version found on environment"
            category: "Programming language"
            keyFact: true
          },
          {
            name: "Lagoon"
            value: "21.3.0"
            environment: 3
            source: "env"
            description: "Lagoon version"
            category: "Platform"
            keyFact: true
          },
          {
            name: "interesting-package"
            value: "1.0.0"
            environment: 3
            source: "local-dev"
            description: "Description of interesting php package"
            category: "Composer package"
          },
          {
            name: "npm-module"
            value: "2.0.0"
            environment: 3
            source: "local-dev"
            description: "Description of node module"
            category: "Node package"
          },
          {
            name: "site-code-status"
            value: "200"
            environment: 3
            source: "curl"
            description: "Health check of site"
            category: "Performance"
            keyFact: true
          }
      ]
    }
  ) {
    id
  }

  UIProject1Environment1addFactReference1: addFactReference(
    input: {
        fid: 2
        name: "lagoondemo.example.org"
    }
  ) {
    id
  }

  UIProject1Environment1addFactReference2: addFactReference(
    input: {
        fid: 2
        name: "cli"
    }
  ) {
    id
  }

  UIProject1Environment2: addOrUpdateEnvironment(
    input: {
      id: 4
      name: "staging"
      project: 18
      deployType: BRANCH
      deployBaseRef: "staging"
      environmentType: DEVELOPMENT
      openshiftProjectName: "lagoon-demo-staging"
    }
  ) {
    id
  }
  UIProject1Environment2Update: updateEnvironment(
    input: {
      id: 4
      patch: {
        route: "https://nginx.staging.lagoon-demo.ui-kubernetes.lagoon.sh"
        routes: "https://nginx.staging.lagoon-demo.ui-kubernetes.lagoon.sh"
      }
    }
  ) {
    id
  }

  UIProject1Environment3: addOrUpdateEnvironment(
    input: {
      id: 5
      name: "dev"
      project: 18
      deployType: BRANCH
      deployBaseRef: "dev"
      environmentType: DEVELOPMENT
      openshiftProjectName: "lagoon-demo-dev"
    }
  ) {
    id
  }
  UIProject1Environment3Update: updateEnvironment(
    input: {
      id: 5
      patch: {
        route: "" # intentionally empty, for testing
        routes: "" # intentionally empty, for testing
      }
    }
  ) {
    id
  }

  UIProject1Environment3addFacts: addFacts(
    input: {
       facts: [
          {
            name: "lagoon-category"
            value: "saas"
            environment: 5
            source: ""
            description: "Category of the site"
            category: "Lagoon"
            keyFact: true
          },
          {
            name: "drupal-core"
            value: "9.0.1"
            environment: 5
            source: "drush-pml"
            description: "Drupal CMS version found on environment"
            category: "Framework"
            keyFact: true
          },
          {
            name: "php-version"
            value: "8.0.3"
            environment: 5
            source: "php-version"
            description: "PHP version found on environment"
            category: "Programming language"
            keyFact: true
          },
          {
            name: "Lagoon"
            value: "21.3.0"
            environment: 5
            source: "env"
            description: "Lagoon version"
            category: "Platform"
            keyFact: true
          },
          {
            name: "interesting-package"
            value: "1.0.0"
            environment: 5
            source: "local-dev"
            description: "Description of interesting php package"
            category: "Composer package"
          },
          {
            name: "npm-module"
            value: "2.0.0"
            environment: 5
            source: "local-dev"
            description: "Description of node module"
            category: "Node package"
          },
          {
            name: "site-code-status"
            value: "403"
            environment: 5
            source: "curl"
            description: "Health check of site"
            category: "Performance"
            keyFact: true
          }
      ]
    }
  ) {
    id
  }

  UIProject1Environment4: addOrUpdateEnvironment(
    input: {
      id: 6
      name: "pr-175"
      project: 18
      deployType: PULLREQUEST
      deployBaseRef: "target"
      deployHeadRef: "source"
      deployTitle: "pr-175"
      environmentType: DEVELOPMENT
      openshiftProjectName: "lagoon-demo-pr-175"
    }
  ) {
    id
  }
  UIProject1Environment4Update: updateEnvironment(
    input: {
      id: 6
      patch: {
        route: "https://nginx.pr-175.lagoon-demo.ui-kubernetes.lagoon.sh"
        routes: "https://nginx.pr-175.lagoon-demo.ui-kubernetes.lagoon.sh"
      }
    }
  ) {
    id
  }

}
