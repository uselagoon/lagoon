// <?php // small hack so our IDE syntax highlighting still works
global $endpoint;
global $api;
global $ssh_port_timeout;

use Symfony\Component\Yaml\Yaml;

// For CI: allow to completely disable lagoon alias loading
if (getenv('LAGOON_DISABLE_ALIASES')) {
  drush_log('LAGOON_DISABLE_ALIASES is set, bailing out of loading lagoon aliases');
  return;
}

// Allow to override project via environment variable
if (getenv('LAGOON_PROJECT')) {
  $project_name = getenv('LAGOON_PROJECT');
  drush_log("LAGOON_PROJECT is set, using '$project_name' as project");
}

if (getenv('LAGOON_OVERRIDE_SSH')) {
  $ssh = getenv('LAGOON_OVERRIDE_SSH');
  drush_log("LAGOON_OVERRIDE_SSH is set, using '$ssh' as ssh");
}

// sometimes ssh port may not available, so we should be able to fail sooner
if (getenv('LAGOON_OVERRIDE_SSH_TIMEOUT')) {
  $ssh_port_timeout = getenv('LAGOON_OVERRIDE_SSH_TIMEOUT');
  drush_log("LAGOON_OVERRIDE_SSH_TIMEOUT is set, using '$ssh_port_timeout' as endpoint timeout");
}

if (getenv('LAGOON_OVERRIDE_API')) {
  $api = getenv('LAGOON_OVERRIDE_API');
  drush_log("LAGOON_OVERRIDE_API is set, using '$api' as endpoint");
}

// You know nothing, John Snow
$lagoonyml_path = $lagoonyml = FALSE;

drush_log('Finding Drupal Root');

if ( (int)DRUSH_VERSION >= 9 ) {
  $_d = new \Drush\Drush();
  $path = $_d->getContainer()->get('bootstrap.manager')->getRoot();
  // _drush_shift_path_up() was part of D8, we define it for D9, borrowed from DrupalFinder->shiftPathUp()
  if(!function_exists("_drush_shift_path_up")) {
    function _drush_shift_path_up($path) {
        $parent = dirname($path);
        return in_array($parent, ['.', $path]) ? false : $parent;
    }
  }
} else {
  $path = drush_locate_root(drush_get_option('root')) ?: getcwd(); // trying to find the main root folder of drupal, if that fails, just the current folder
}

$drupal_path = realpath($path);

// No project name could be found, let's search for it via the .lagoon.yml file
drush_log("Starting to search for .lagoon.yml file to extract project name within '$path' and parent directories");

// Borrowed from drush_locate_root() - thank you
foreach (array(TRUE, FALSE) as $follow_symlinks) {
  if ($follow_symlinks && is_link($path)) {
    $path = realpath($path);
  }
  // Check the start path.
  if (file_exists("$path/.lagoon.yml")) {
    $lagoonyml_path = "$path/.lagoon.yml";
    break;
  }
  else {
    // Move up dir by dir and check each.
    while ($path = _drush_shift_path_up($path)) {
      if ($follow_symlinks && is_link($path)) {
        $path = realpath($path);
      }
      if (file_exists("$path/.lagoon.yml")) {
        $lagoonyml_path = "$path/.lagoon.yml";
        break 2;
      }
    }
  }
}

// An .lagoon.yml file has been found, let's try to load the project from it.
if ($lagoonyml_path) {
  drush_log("Using .lagoon.yml file at: '$lagoonyml_path'");

  $lagoonyml = Yaml::parse( file_get_contents($lagoonyml_path) );


  if (empty($project_name)) {
    if ($lagoonyml['project']) {
      $project_name = $lagoonyml['project'];
      drush_log("Discovered project name '$project_name' from .lagoon.yml file");
    } else {
      drush_log('ERROR: Could not discover project name from .lagoon.yml file', 'warning');
      return;
    }
  }

  if (empty($ssh)) {
    if ($lagoonyml['ssh']) {
      $ssh = $lagoonyml['ssh'];
      drush_log("Discovered ssh '$ssh' from .lagoon.yml file");
    } else if ($lagoonyml['endpoint']) {
      $ssh = $lagoonyml['endpoint'];
      drush_log("Discovered ssh from old `endpoint` key as '$endpoint' from .lagoon.yml file");
    }
  }

  if (empty($api)) {
    if ($lagoonyml['api']) {
      $api = $lagoonyml['api'];
      drush_log("Discovered api '$api' from .lagoon.yml file");
    }
  }

  // sometimes ssh port may not reachable, so we should be able to fail sooner
  if (empty($ssh_port_timeout)) {
    if ($lagoonyml['ssh_port_timeout']) {
      $ssh_port_timeout = $lagoonyml['ssh_port_timeout'];
      drush_log("Discovered ssh_port_timeout '$ssh_port_timeout' from .lagoon.yml file");
    }
  }

} else {
  drush_log('Could not find .lagoon.yml file.');
}

// Project still not defined, throw a warning.
if ($project_name === FALSE) {
  drush_log('ERROR: Could not discover project name, you should define it inside your .lagoon.yml file', 'warning');
  return;
}

if (!empty($ssh)) {
  if (count(explode(":", $ssh)) == 2) {
    list ($ssh_host, $ssh_port) = explode(":", $ssh);
  } else {
    drush_log("ERROR: Wrong formatted ssh `$ssh`, it should be in form \"[host]:[port]\"", 'warning');
    return;
  }
} else {
  drush_log("Using default SSH Endpoint 'ssh.lagoon.amazeeio.cloud:32222'");
  $ssh_host = 'ssh.lagoon.amazeeio.cloud';
  $ssh_port = 32222;
}

if (!empty($api)) {
  // $api had an old format of just "host:port", we still support that, but actually we expect the new format be "http://host"
  if (count(explode(":", $api)) == 2) {
    list ($api_host, $api_port) = explode(":", $api);
    $api_url = "$api_host:$api_port/graphql";
  } else {
    $api_url = "$api/graphql";
  }
} else {
  drush_log("Using default API 'https://api.lagoon.amazeeio.cloud/graphql'");
  $api_url = 'https://api.lagoon.amazeeio.cloud/graphql';
}

$cid = "lagoon_aliases_$project_name";

// Try to pull the aliases from the cache.
$cache = drush_cache_get($cid);

// Drush does not respect the cache expire, so we need to check it ourselves.
// If `LAGOON_IGNORE_DRUSHCACHE` is set or we are on Drush 9, we skip the cache all together
if (isset($cache->data) && time() < $cache->expire && getenv('LAGOON_IGNORE_DRUSHCACHE') === FALSE && DRUSH_MAJOR_VERSION !== "9") {
  drush_log('Hit lagoon project cache');
  $aliases = $cache->data;

  if (getenv('LAGOON_DEBUG')) {
    drush_log("Aliases found in cache: " . var_export($aliases, true));
  }

  return;
}

// sometimes ssh port may not available, so we should be able to fail sooner
// can set an env var `LAGOON_OVERRIDE_SSH_TIMEOUT=<val>` or define `ssh_port_timeout: <val>` in `.lagoon.yml` to a time in seconds to fail sooner and let user know why
// if there is no defined timeout further up, set a value
if (empty($ssh_port_timeout)) {
  $ssh_port_timeout = 30; //default timeout
}
$ssh_port_check = @fsockopen($ssh_host, $ssh_port, $errno, $errstr, $ssh_port_timeout);
if (is_resource($ssh_port_check))
{
    fclose($ssh_port_check);
} else {
    drush_log("Could not connect to ".$ssh_host." port ".$ssh_port.", error was ".$errno.":".$errstr.".", 'warning');
    return;
}

$jwttoken_cache = drush_cache_get("lagoon_jwttoken");

if (getenv('LAGOON_OVERRIDE_JWT_TOKEN')) {
  $jwt_token = getenv('LAGOON_OVERRIDE_JWT_TOKEN');
} else if (isset($jwttoken_cache->data) && time() < $jwttoken_cache->expire && getenv('LAGOON_IGNORE_DRUSHCACHE') === FALSE) {
  drush_log('Hit lagoon jwttoken cache');
  $jwt_token = $cache->data;

  if (getenv('LAGOON_DEBUG')) {
    drush_log("JWT Token found in cache: " . var_export($jwt_token, true));
  }

} else {
  // if ssh takes too long to get a token, timeout with the same ssh port timeout used to check the port status
  // this could be because the API is unavailable
  exec("timeout $ssh_port_timeout ssh -p $ssh_port -o ConnectTimeout=5 -o LogLevel=FATAL -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no lagoon@$ssh_host token 2>&1", $token_array, $rc);
  if ($rc !== 0) {
    drush_log("Could not load API JWT Token, error was: '" . implode(",", $token_array), 'warning');
    return;
  }

  if (getenv('LAGOON_DEBUG')) {
    drush_log("JWT Token loaded via ssh: " . $token_array[0]);
  }
  $jwt_token = $token_array[0];
}

// The aliases haven't been cached yet. Load them from the API.
drush_log("Loading site configuration for '$project_name' from the API.");

$query = sprintf('{
  project:projectByName(name: "%s") {
    productionEnvironment
    standbyProductionEnvironment
    productionAlias
    standbyAlias
    environments {
      name
      openshiftProjectName
    }
  }
}
', $project_name);

drush_log("Using $api_url as lagoon API endpoint");

$curl = curl_init($api_url);

// Build up the curl options for the GraphQL query. When using the content type
// 'application/json', graphql-express expects the query to be in the json
// encoded post body beneath the 'query' property.
curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
curl_setopt($curl, CURLOPT_POST, TRUE);
curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);
curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);
curl_setopt($curl, CURLOPT_POSTREDIR, CURL_REDIR_POST_ALL);
curl_setopt($curl, CURLOPT_HTTPHEADER, ['Content-Type: application/json', "Authorization: Bearer $jwt_token"]);
curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode(array(
  'query' => $query,
)));

if (getenv('LAGOON_DEBUG')) {
  drush_log("Sending to api: " . $query);
}

$response = curl_exec($curl);

if (getenv('LAGOON_DEBUG')) {
  drush_log("Response from api: " . var_export($response, true));
}

// Check if the curl request succeeded.
if ($response === FALSE) {
  $info = var_export(curl_getinfo($curl), TRUE);
  $error = curl_error($curl);
  curl_close($curl);


  drush_log($info, 'error');
  drush_log($error, 'error');
  exit;
}

curl_close($curl);
$response = json_decode($response);

if (getenv('LAGOON_DEBUG')) {
  drush_log("Decoded response from api: " . var_export($response, true));
}

// Check if the query returned any data for the requested project.
if (empty($response->data->project->environments)) {
  drush_log("Curl request didn't return any environments for the given project '$project_name'.", 'warning');
  return;
}

$environments = $response->data->project->environments;
$productionEnvironment = $response->data->project->productionEnvironment;
$standbyProductionEnvironment = $response->data->project->standbyProductionEnvironment;
$productionAlias = $response->data->project->productionAlias;
$standbyAlias = $response->data->project->standbyAlias;
// Default server definition, which has no site specific elements
$defaults = [
  'command-specific' => [
    'sql-sync' => [
      'no-ordered-dump' => TRUE
    ],
  ],
  'ssh-options' => "-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no",
];

$aliases = array_reduce($environments, function ($carry, $environment) use ($defaults, $ssh_host, $ssh_port, $drupal_path, $productionEnvironment, $standbyProductionEnvironment, $productionAlias, $standbyAlias) {
  $site_name = str_replace('/','-',$environment->name);
  $site_host = 'localhost';

  $alias = [];
  // Drush 9 needs aliases prefixed with a group name in order to be able to convert them correctly
  if (DRUSH_MAJOR_VERSION == "9") {
    $site_name = 'lagoon.' . $site_name;
  }
  // if we have an active and standby environment configured, then lets provide some quick aliases for them
  if ($environment->name == $productionEnvironment && $standbyProductionEnvironment != NULL) {
    $alias[$productionAlias] = [
      'remote-host' => "$ssh_host",
      'remote-user' => "$environment->openshiftProjectName",
      'root' => "$drupal_path",
      'backup-dir' => '/tmp',
      'ssh-options' => "-o LogLevel=FATAL -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p $ssh_port",
    ] + $defaults;
  }
  if ($environment->name == $standbyProductionEnvironment && $standbyProductionEnvironment != NULL) {
    $alias[$standbyAlias] = [
      'remote-host' => "$ssh_host",
      'remote-user' => "$environment->openshiftProjectName",
      'root' => "$drupal_path",
      'backup-dir' => '/tmp',
      'ssh-options' => "-o LogLevel=FATAL -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p $ssh_port",
    ] + $defaults;
  }
  $alias[$site_name] = [
    'remote-host' => "$ssh_host",
    'remote-user' => "$environment->openshiftProjectName",
    'root' => "$drupal_path",
    'backup-dir' => '/tmp',
    'ssh-options' => "-o LogLevel=FATAL -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p $ssh_port",
  ] + $defaults;

  return $carry + $alias;
}, []);

if (getenv('LAGOON_DEBUG')) {
  drush_log("Generated aliases: " . var_export($aliases, true));
}

// Caching the aliases for 10 minutes.
drush_cache_set($cid, $aliases, 'default', time() + 600);

