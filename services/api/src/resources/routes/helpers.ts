import { Pool } from 'mariadb';
import { query } from '../../util/db';
import { Sql } from './sql';
import { Helpers as environmentHelpers } from '../environment/helpers';
import { Helpers as projectHelpers } from '../project/helpers';

import { RouteAnnotations, PathRoutes } from './types';

export const Helpers = (sqlClientPool: Pool) => {
  const removeAllRoutesFromEnvironment = async (environmentId: number) => {
    await query(
      sqlClientPool,
      Sql.removeAllRoutesFromEnvironment(environmentId)
    )
  }
  const deleteEnvironmentAutogeneratedRoutes = async (environmentId: number) => {
    await query(
      sqlClientPool,
      Sql.deleteEnvironmentAutogeneratedRoutes(environmentId)
    )
  }
  const removeRouteFromEnvironment = async (domain: string, environmentId: number) => {
    const routes = await query(
      sqlClientPool,
      Sql.selectRoutesByDomainAndEnvironmentID(domain, environmentId)
    )
    if (routes.length == 0) {
      throw Error(`Route doesn't exist on this environment`)
    }
    const route = routes[0]
    if (route.autogenerated == true) {
      throw Error(`Cannot remove autogenerated routes`)
    }
    await query(
      sqlClientPool,
      Sql.updateRoute({
        id: route.id,
        patch: {
          environment: null,
          service: null,
          pathRoutes: null,
        }
      })
    );
    return route.id
  };

  return {
    removeAllRoutesFromEnvironment,
    deleteEnvironmentAutogeneratedRoutes,
    removeRouteFromEnvironment,
  }
}

export function addAnnotation(
  annotations: RouteAnnotations,
  newKey: string,
  newValue: string
): RouteAnnotations {
  const exists = annotations.some(
    (a) => a.key === newKey && a.value === newValue
  );

  if (!exists) {
    return [...annotations, { key: newKey, value: newValue }];
  }

  return annotations;
}

export function removeAnnotation(
  annotations: RouteAnnotations,
  targetKey: string,
): RouteAnnotations {
  return annotations.filter(
    (a) => !(a.key === targetKey)
  );
}

export function addServicePathRoute(
  pathRoutes: PathRoutes,
  newToService: string,
  newPath: string
): PathRoutes {
  const exists = pathRoutes.some(
    (a) => a.toService === newToService && a.path === newPath
  );

  if (!exists) {
    return [...pathRoutes, { toService: newToService, path: newPath }];
  }

  return pathRoutes;
}

export function removeServicePathRoute(
  pathRoutes: PathRoutes,
  targetToService: string,
  targetPath: string
): PathRoutes {
  return pathRoutes.filter(
    (a) => !(a.toService === targetToService && a.path === targetPath)
  );
}