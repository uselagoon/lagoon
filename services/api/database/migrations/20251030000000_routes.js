/**
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> }
 */
exports.up = async function(knex) {
    const route = await knex.schema.hasTable('routes');
    if (!route) {
        return knex.schema
        .createTable('routes', function (table) {
            table.increments('id').notNullable().primary();
            table.timestamp('created').notNullable().defaultTo(knex.fn.now());
            table.timestamp('updated').notNullable().defaultTo(knex.fn.now());
            table.string('domain', 253).notNullable();
            table.integer('project').notNullable();
            table.integer('environment');
            table.string('service', 300);
            table.boolean('tls_acme').notNullable().defaultTo(1); // default to true
            table.enu('insecure', ['Allow', 'Redirect', 'None']).notNullable().defaultTo('Redirect');
            table.string('monitoring_path', 300);
            table.boolean('hsts_enabled').notNullable().defaultTo(0); // default to false
            table.boolean('hsts_include_subdomains').notNullable().defaultTo(0);
            table.boolean('hsts_preload').notNullable().defaultTo(0); // default to false
            table.integer('hsts_max_age').defaultTo(3153600);
            table.boolean('primary').notNullable().defaultTo(0); // default to false
            table.boolean('disable_request_verification').notNullable().defaultTo(0); // default to false
            table.text('path_routes');
            table.enu('source', ['api','yaml','autogenerated']).notNullable().defaultTo('api');
            table.enu('type', ['standard', 'active', 'standby']).notNullable().defaultTo('standard');
            // table.boolean('wildcard').notNullable().defaultTo(0); // TBD
            // table.boolean('wildcard_apex').notNullable().defaultTo(0); // TBD
            // table.enu('verified', ['new','pending', 'running', 'error', 'verified']).notNullable().defaultTo('new'); // TBD
            // table.json('verification').defaultTo('{}'); //TBD
            // table.string('ingress_class', 300); // TBD
            table.unique(['domain', 'project'], {indexName: 'route_project'});
        })
        .createTable('routes_alternate_domain', function (table) {
            table.increments('id').notNullable().primary();
            table.integer('route_id'); //route id
            table.string('domain', 253).notNullable();
            // table.json('verification').defaultTo('{}'); //TBD
            table.unique(['domain', 'route_id'], {indexName: 'alternate_domain_route'});
        })
        .createTable('routes_annotations', function (table) {
            table.increments('id').notNullable().primary();
            table.integer('route_id');
            table.string('key', 63).notNullable();
            table.text('value');
            table.unique(['key', 'route_id'], {indexName: 'alternate_domain_route'});
        })
        .createTable('routes_autogenerated_configuration', (table) => {
            table.increments('id').notNullable().primary();
            table.enu('type', ['project', 'environment']);
            table.integer('type_id');
            table.timestamp('updated').notNullable().defaultTo(knex.fn.now());
            table.boolean('enabled').notNullable().defaultTo(1); // default to true
            table.boolean('allow_pull_requests').notNullable().defaultTo(1); // default to true
            table.boolean('tls_acme').notNullable().defaultTo(1); // default to true
            table.enu('insecure', ['Allow', 'Redirect', 'None']).notNullable().defaultTo('Redirect');
            table.text('prefixes') // would be comma separated list of prefixes representing what is in the .lagoon.yml, would override lagoon.yml if defined
            table.text('path_routes') // would be JSON equivalent of what is in lagoon.yml, would override lagoon.yml if defined
            table.boolean('disable_request_verification').notNullable().defaultTo(0); // default to false
            table.unique(['type', 'type_id'], {indexName: 'autogenerated_route_config_type'});
        })
        .alterTable('organization', function (table) {
            table.boolean('feature_api_routes').defaultTo(0); // disable api routes feature by default, future release of lagoon will remove this when routes api becomes generally available
        })
    }
    else {
        return knex.schema
    }
};

/**
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> }
 */
exports.down = async function(knex) {
    return knex.schema
    .dropTable('routes')
    .dropTable('routes_alternate_domain')
    .dropTable('routes_annotations')
    .dropTable('routes_autogenerated_configuration')
    .alterTable('organization', (table) => {
        table.dropColumn('feature_api_routes');
    });
};