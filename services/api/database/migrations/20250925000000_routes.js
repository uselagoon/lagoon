/**
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> }
 */
exports.up = async function(knex) {
    route = await knex.schema.hasTable('routes');
    if (!route) {
        return knex.schema
        .createTable('routes', function (table) {
            table.increments('id').notNullable().primary();
            table.string('domain', 300).notNullable();
            table.integer('project').notNullable();
            table.integer('environment');
            table.string('service', 300);
            table.boolean('tls_acme').notNullable().defaultTo(1);
            table.enu('insecure', ['Allow', 'Redirect', 'None']).notNullable().defaultTo('Redirect');
            // table.string('ingress_class', 300);
            table.text('annotations');
            table.text('path_routes');
            table.string('monitoring_path', 300);
            table.boolean('hsts_enabled').notNullable().defaultTo(0);
            table.boolean('hsts_include_subdomains').notNullable().defaultTo(0);
            table.boolean('hsts_preload').notNullable().defaultTo(0);
            table.integer('hsts_max_age').defaultTo(3153600);
            table.boolean('autogenerated').notNullable().defaultTo(0);
            table.boolean('primary').notNullable().defaultTo(0);
            table.boolean('wildcard').notNullable().defaultTo(0);
            table.boolean('wildcard_apex').notNullable().defaultTo(0);
            table.boolean('disable_request_verification').notNullable().defaultTo(0);
            table.enu('verified', ['new','pending', 'running', 'error', 'verfied']).notNullable().defaultTo('new');
            table.json('verification').defaultTo('{}');
            table.enu('source', ['api','yaml']).notNullable().defaultTo('api');
            table.unique(['domain', 'project'], {indexName: 'route_project'});
        })
        .createTable('routes_alternate_domain', function (table) {
            table.increments('id').notNullable().primary();
            table.integer('rid');
            table.string('domain', 300).notNullable();
            table.json('verification').defaultTo('{}');
            table.unique(['domain', 'rid'], {indexName: 'alternate_domain_route'});
        })
    }
    else {
        return knex.schema
    }
};

/**
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> }
 */
exports.down = async function(knex) {
    return knex.schema
};