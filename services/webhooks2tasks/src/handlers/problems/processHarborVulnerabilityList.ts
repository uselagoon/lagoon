// @flow

import { addProblem,
  deleteProblemsFromSource,
  getProblemsforProjectEnvironment,
} from '@lagoon/commons/dist/api';
import { sendToLagoonLogs } from '@lagoon/commons/dist/logs/lagoon-logger';
import { generateProblemsWebhookEventName } from "./webhookHelpers";
const HARBOR_VULNERABILITY_SOURCE = 'Harbor';


export async function processHarborVulnerabilityList(
  WebhookRequestData,
  channelWrapperWebhooks
) {
    const { webhooktype, event, uuid, body } = WebhookRequestData;

    const {
      lagoonProjectId,
      lagoonProjectName,
      lagoonEnvironmentId,
      lagoonEnvironmentName,
      lagoonServiceName,
      vulnerabilities,
    } = body;

    //Let's get the existing problems before removing them ...
    const existingProblemSet = (
      await getProblemsforProjectEnvironment(
        lagoonEnvironmentName,
        lagoonProjectId
      )
    )
      .filter((e) => e.service == lagoonServiceName)
      .reduce((prev, current) => prev.concat([current.identifier]), []);

    await deleteProblemsFromSource(
      lagoonEnvironmentId,
      HARBOR_VULNERABILITY_SOURCE,
      lagoonServiceName
    );

    if (vulnerabilities) {
      for(let element of vulnerabilities) {
        try {

        await addProblem({
          environment: lagoonEnvironmentId,
          identifier: element.id,
          severity: element.severity.toUpperCase(),
          severityScore: null,
          source: HARBOR_VULNERABILITY_SOURCE,
          description: element.description,
          links: element.links.pop(),
          data: JSON.stringify(element),
          version: element.version,
          fixedVersion: element.fix_version,
          service: lagoonServiceName,
          associatedPackage: element.package,
        })

        await sendToLagoonLogs(
              'info',
              lagoonProjectName,
              uuid,
              generateProblemsWebhookEventName({
                source: 'harbor',
                severity: element.severity.toUpperCase(),
                isNew: !existingProblemSet.includes(element.id),
              }),
              {
                lagoonProjectId,
                lagoonProjectName,
                lagoonEnvironmentId,
                lagoonEnvironmentName,
                lagoonServiceName,
                severity: element.severity.toUpperCase(),
                vulnerability: element,
              },
              `New problem found for ${lagoonProjectName}:${lagoonEnvironmentName}:${lagoonServiceName}. Severity: ${element.severity}. Description: ${element.description}`
          );
        } catch (error) {
            sendToLagoonLogs(
              'error',
              '',
              uuid,
              `${webhooktype}:${event}:problem_insert_error`,
              { data: body },
              `Error inserting problem id ${element.id} for ${lagoonProjectId}:${lagoonEnvironmentId} -- ${error.message}`
            )
        }
      }
    }
  }
